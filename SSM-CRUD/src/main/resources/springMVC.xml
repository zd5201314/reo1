<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- 配置自定扫描的包 -->
 	<context:component-scan base-package="com.zd.crud"  use-default-filters="false">
 		<!-- 只扫描带有@Controller注解的组件 -->
 		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
 	</context:component-scan>
	<!-- 配置视图解析器: 如何把 handler 方法返回值解析为实际的物理视图 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	<!-- <bean id="viewResolver2" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean> -->

	
	<!-- 配置文件上传的解析器：将java里面的File对象转换成spring里面的MultipartFile对象 -->
	<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		属性的值一般使用默认属性
		配置文件上传时所使用的文件的编码格式，具体写上传文件的页面所使用的编码格式
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>	 -->
	
	<!-- 配置tomcat中默认的servlet，defaultServlet 
			注意：当tomcat中默认的defaultServlet的url-pattern与开发人员配置dispatchServlet的url-parttern都是
					/时，开发人员配置dispatchServlet的优先级最高
			作用：当客户端发来请求时，因为tomcat中默认的defaultServlet的url-pattern与开发人员
						dispatchServlet的url-parttern都是/，因此先由dispaServlet处理请求，找该请求是否有相对应的处理器进行处理，
						如果没有，则交给defaultServlet去处理，
	-->
	
	<mvc:default-servlet-handler/>
	
	<!-- mvc驱动， -->
	<mvc:annotation-driven />
	
	<!-- 配置拦截器 
			拦截器的配置有两种方式：1.同过bean标签配置
												   2.通过ref标签配置，引入拦截器，需要在对应的拦截器上加入@Component
												   注解，通过bean属性引入拦截器-->
	<!-- <mvc:interceptors>
		<bean class="com.zd.json.interceptor.FirstInterceptor"/>
		<ref bean="secondInterceptor" />
		
			自定义拦截器
		<mvc:interceptor>
			<bean></bean>
				设置拦截的路径
			<mvc:mapping path=""/>
				设置哪些方法不会被拦截
			<mvc:exclude-mapping path=""/>
		</mvc:interceptor>
	</mvc:interceptors> -->
</beans>